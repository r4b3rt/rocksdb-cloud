// Copyright (c) 2019-present, Rockset, Inc.  All rights reserved.
// This source code is licensed under both the GPLv2 (found in the
// COPYING file in the root directory) and Apache 2.0 License
// (found in the LICENSE.Apache file in the root directory).

#pragma once

#include <stdint.h>

#include <climits>
#include <vector>

#include "rocksdb/options.h"

namespace ROCKSDB_NAMESPACE {

/**
 * Defines all the parameters of the pluggable compaction interface.
 */
struct FilesInOneLevel;
struct OutputFile;

//
// The input parameters for a pluggable compaction request.
//
class PluggableCompactionParam {
 public:
  // The compaction options to be used for the compaction
  CompactionOptions compact_options;

  // The name of the column family
  std::string column_family_name;

  // List of existing snapshots in the db
  std::vector<SequenceNumber> existing_snapshots;

  // List of input files of the compaction
  std::vector<FilesInOneLevel> input_files;

  // The level to which the files are compacted into
  int output_level;

  // Control whether the DB is shutting down
  const std::atomic<bool>* shutting_down;
};

//
// The results returned by a pluggable compaction request.
//
class PluggableCompactionResult {
 public:
  // The list of files created by the compaction process
  std::vector<OutputFile> output_files;

  // The total size of the output files
  uint64_t total_bytes;

  // The total number of records that were input to this compaction
  uint64_t num_input_records;

  // The total number of records that were output from this compaction
  uint64_t num_output_records;
};

/**
 * The Pluggable compaction service definition.
 * When it is time to do a compaction, RocksDB will invoke the Run method.
 * If the Run method completes successfully, then RocksDB will invoke the
 * InstallFile method to install the results of that compaction
 * on the local database instance.
 * All methods of this service are called from background threads.
 */
class PluggableCompactionService {
 public:
  // Run the specified compaction. The results of the compaction are
  // returns in PluggableCompactionResult.
  virtual Status Run(const PluggableCompactionParam& job,
                     PluggableCompactionResult* result) = 0;

  // Install files that were generated by a pluggable compaction request into
  // the local database.
  virtual std::vector<Status> InstallFiles(
      const std::vector<std::string>& remote_paths,
      const std::vector<std::string>& local_paths,
      const EnvOptions& env_options, Env* local_env) = 0;

  virtual ~PluggableCompactionService() {}
};

// A list of all files in a single specified level.
struct FilesInOneLevel {
  int level;
  std::vector<std::string> files;
};

// The definition of a single file created by a pluggable
// compaction request.
struct OutputFile {
  std::string pathname;
  TableProperties table_properties;
  uint64_t file_size;
  uint64_t num_entries;
  uint64_t num_deletions;
  uint64_t raw_key_size;
  uint64_t raw_value_size;
  std::string smallest_internal_key;
  std::string largest_internal_key;
  SequenceNumber smallest_seqno;
  SequenceNumber largest_seqno;
};

}  // namespace ROCKSDB_NAMESPACE
